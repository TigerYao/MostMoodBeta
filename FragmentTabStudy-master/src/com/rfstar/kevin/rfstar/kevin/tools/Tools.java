package com.rfstar.kevin.rfstar.kevin.tools;import android.app.Activity;import android.content.Context;import android.content.pm.PackageInfo;import android.content.pm.PackageManager;import android.graphics.Bitmap;import android.graphics.Bitmap.Config;import android.graphics.Canvas;import android.graphics.Paint;import android.graphics.PorterDuff.Mode;import android.graphics.PorterDuffXfermode;import android.graphics.Rect;import android.graphics.RectF;import android.telephony.TelephonyManager;import android.util.DisplayMetrics;/** * 宸ュ叿绫? *  * @author Kevin.wu *  */public class Tools {	/**	 * 瀛楄妭杞崄鍏繘鍒?涓虹浉搴旂殑瀛楃涓叉樉绀?	 * 	 * @param data	 * @return	 */	public static String byte2Hex(byte data[]) {		if (data != null && data.length > 0) {			StringBuilder sb = new StringBuilder(data.length);			for (byte tmp : data) {				sb.append(String.format("%02X ", tmp));			}			return sb.toString();		}		return "no data";	}	/**	 * 灏哹yte杞崲涓轰竴涓暱搴︿负8鐨刡yte鏁扮粍锛屾暟缁勬瘡涓?浠ｈ〃bit	 */	public static byte[] getBooleanArray(byte b) {		byte[] array = new byte[8];		for (int i = 7; i >= 0; i--) {			array[i] = (byte) (b & 1);			b = (byte) (b >> 1);		}		return array;	}	/**	 * 	 * 鎶奲yte杞负bit	 * 	 * @param array	 * @return	 */	public static byte getByteFromBooleanArray(byte[] array) {		byte bit = 0;		for (int i = 0; i < array.length; i++) {			array[i] = (byte) (array[i] & 0x1);			bit += (array[i] << (array.length - i - 1));		}		// bit = (byte) (bit + 127);		return (byte) bit;	}	/**	 * 鎶奲yte杞负瀛楃涓茬殑bit	 */	public static String byteToBit(byte b) {		return "" + (byte) ((b >> 7) & 0x1) + (byte) ((b >> 6) & 0x1) + " "				+ (byte) ((b >> 5) & 0x1) + (byte) ((b >> 4) & 0x1) + " "				+ (byte) ((b >> 3) & 0x1) + (byte) ((b >> 2) & 0x1) + " "				+ (byte) ((b >> 1) & 0x1) + (byte) ((b >> 0) & 0x1);	}	/**	 * 鎶奲yte杞负瀛楃涓茬殑bit	 * 	 * @param b	 * @param length	 * @return	 */	public static String byteToBit(byte b, int length) {		String bitString = null;		for (int i = (length - 1); i >= 0; i--) {			bitString += (byte) (b >> i) & 0x1;			b = (byte) (b >> 1);		}		return bitString;	}	/**	 * 鑾峰彇 imei鍞竴璇嗗埆鐮?	 * 	 * @param context	 * @return	 */	public static String getIMEI(Context context) {		TelephonyManager tm = (TelephonyManager) context				.getSystemService(Context.TELEPHONY_SERVICE);		return tm.getDeviceId();	}	/**	 * 鑾峰彇灞忓箷绠＄悊绫?	 * 	 * @return DisplayMetrics 灞忓箷绠＄悊瀵硅薄	 */	public static DisplayMetrics getDisplayMetrics(Context context) {		DisplayMetrics displayMetrics = null;		if (displayMetrics == null) {			displayMetrics = new DisplayMetrics();		}		((Activity) context).getWindowManager().getDefaultDisplay()				.getMetrics(displayMetrics);		return displayMetrics;	}	/**	 * 鍥剧墖鍦嗚	 * 	 * @param bitmap	 * @param pixels	 * @return	 */	public static Bitmap toRoundCorner(Bitmap bitmap, int color) {		int jiange = 10;		Bitmap output = Bitmap.createBitmap(bitmap.getWidth(),				bitmap.getHeight(), Config.ARGB_8888);		Canvas canvas = new Canvas(output);		final Paint paint = new Paint();		final Rect rect = new Rect(jiange, jiange, bitmap.getWidth() - jiange,				bitmap.getHeight() - jiange);		final RectF rectF = new RectF(rect);		final float roundPx = bitmap.getHeight() / 2;		paint.setAntiAlias(true);		canvas.drawARGB(0, 0, 0, 0);		paint.setColor(color);		canvas.drawRoundRect(rectF, roundPx, roundPx, paint);		paint.setXfermode(new PorterDuffXfermode(Mode.SRC_IN));		canvas.drawBitmap(bitmap.extractAlpha(), rect, rect, paint);		return output;	}	/**	 * 鑾峰彇鐗堟湰鍙?	 * 	 * @return 褰撳墠搴旂敤鐨勭増鏈彿	 */	public static String getVersion(Context context) {		try {			PackageManager manager = context.getPackageManager();			PackageInfo info = manager.getPackageInfo(context.getPackageName(),					0);			String version = info.versionName;			return "V" + version;		} catch (Exception e) {			e.printStackTrace();			return "";		}	}}